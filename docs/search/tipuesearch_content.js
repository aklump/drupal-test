var tipuesearch = {"pages":[{"title":"Drupal Test","text":"    Summary  This is a testing solution for using PhpUnit with Drupal 7 websites.  It provides Unit, Kernel, and Client abstract test classes to use in writing your tests, a single test runner, testing for modules and themes, support for JsonSchema validation, as well as a set of guidelines and processes for better testing of Drupal 7 modules and websites.  All of this using a single test runner that can be divided by test suite or filtered by test class using normal PhpUnit options.  Visit https:\/\/aklump.github.io\/drupal-test for full documentation.  Quick Start  After installation (see below), follow instructions in the documentation (docs\/index.html) to write and run tests.  Requirements   Composer PHPUnit   Contributing  If you find this project useful... please consider making a donation.  Installation  From inside the directory above the web root run this one-liner:  [ ! -d tests ] &amp;&amp; git clone https:\/\/github.com\/aklump\/drupal-test.git tests &amp;&amp; (cd tests &amp;&amp; .\/bin\/install.sh) || echo \"Installation error, nothing installed.\"   About the files in this project  The following files are considered core and should never be modified.  drupal_test.yml drupal_test_bootstrap.php LICENSE README.md   Additionally, do not add files to the following folders, which are replaced on every update.  It is safe to add classes to src so long as you avoid src\/DrupalTest.  bin docs src\/DrupalTest   Update to the latest version  From inside the tests directory, run:  .\/bin\/update.sh   This will copy over the core files from the latest repository, but leave the non-core files alone, namely phpunit.xml and composer.json, which you most-likely will have modified.  Configuration  See documentation for more information about configuration.   Open tests\/composer.json and add module and theme composer.json filepaths. From tests run composer update --lock. Open tests\/phpunit.xml and add any JSON schema directories.   Usage  Run All Tests  $ cd tests $ phpunit -c phpunit.xml   Run All Unit Tests  $ cd tests $ phpunit -c phpunit.xml --testsuite Unit   Run All Kernel Tests  $ cd tests $ phpunit -c phpunit.xml --testsuite Kernel   Run All Client Tests  $ cd tests $ phpunit -c phpunit.xml --testsuite Client   Refer to the documentation for more info. ","tags":"","url":"README.html"},{"title":"Client Tests","text":"  This is a type of tests where you will be testing endpoints of an API or URLs.  Use this to check for URL statuses and headers for example.  This has the same scope as unit tests, which means you can access class constants, but no Drupal bootstrap.  Tests act as an API consumer or client of the website.  There are custom assert methods on this class to help with such testing.  These types can test for:   Redirects Page contents HTTP status codes REST responses   Configuration  The base URL must be set in an environment variable in order for client tests to work, e.g.,  $ cd tests\/phpunit $ export TEST_BASE_URL=http:\/\/my-website.loft; phpunit -c phpunit.xml --testsuite Client   If the site under test is behind http authorization you must also provide that, e.g.  $ export TEST_BASE_URL=http:\/\/user:pass@my-website.loft; phpunit -c phpunit.xml --testsuite Client   Assert Page Content  Using a string search:  $this-&gt;loadPageByUrl('collections')   -&gt;assertPageContains('logo.jpg')   Using CSS selectors:  $this-&gt;loadPageByUrl('search')   -&gt;assertDomElementExists('.views-widget-filter-id')   Assert HTTP Status  public function testBlogPage() {   $this-&gt;loadHeadByUrl('blog')-&gt;assertHttpStatus(200); }   Response validation with JSON Schema  https:\/\/json-schema.org\/latest\/json-schema-validation.html#rfc.section.6.3.3  The client tests provide the means of validation using JSON Schema.  You indicate where your schema files are located in phpunit.xml using the custom key jsonschema.  Child nodes of directory are relative to phpunit.xml; you may use globs; you may have more than one directory node.  &lt;phpunit&gt;     &lt;jsonschema&gt;         &lt;directory&gt;..\/web\/sites\/all\/modules\/custom\/*\/tests\/schema&lt;\/directory&gt;     &lt;\/jsonschema&gt; &lt;\/phpunit&gt;   Then to validate an URL do something like the following:  Validating XML Responses  This example shows how load an endpoint that returns XML and validate that using a JSON Schema; then it checks for specific values in the XML.  public function testXMLEndpoint() {   $this-&gt;loadXmlByUrl('api\/1\/some\/endpoint')     -&gt;assertResponseMatchesSchema('resource.json');    $this-&gt;assertSame(123, (int) $this-&gt;xml-&gt;id);   $this-&gt;assertSame('name', (string) $this-&gt;xml-&gt;name); }    ","tags":"","url":"client.html"},{"title":"Kernel Tests","text":"   Test classnames should follow: &#42;KernelTest Kernel tests have a full Drupal bootstrap and access to the database, global functions and constants.   Data Providers and Kernel Tests   Bootstrapped Drupal elements, e.g. constants are not available in the data provider methods of a test class. Class constants are available, however.  ","tags":"","url":"kernel.html"},{"title":"Add Manual Tests","text":"  This project uses aklump\/manual-test for manual tests.  This page shows how to integrate manual tests into your Drupal project.  Configuration   Add configuration like the following (replacing tokens) to phpunit.xml:  &lt;phpunit ...&gt;   ...   &lt;manualtests&gt;       &lt;title&gt;{{ website or domain}}&lt;\/title&gt;       &lt;tester&gt;{{ default tester name }}&lt;\/tester&gt;       &lt;output&gt;{{ path to pdf output file }}&lt;\/output&gt;       &lt;testsuite name=\"Manual\"&gt;           &lt;directory&gt;..\/web\/sites\/all\/modules\/custom\/*\/tests\/src\/Manual\/*&lt;\/directory&gt;       &lt;\/testsuite&gt;   &lt;\/manualtests&gt; &lt;\/phpunit&gt;    Generate tests  To create the PDF file for manual test running... See the documentation for more info.  cd tests export TEST_BASE_URL=\"http:\/\/www.mysite.com\"; .\/vendor\/bin\/generate --configuration=phpunit.xml --output=mysite-manual-tests.com.pdf --tester=\"Aaron Klump\"   Hint, create a shortcut file, something like: manual.sh  #!\/usr\/bin\/env bash source=\"${BASH_SOURCE[0]}\" while [ -h \"$source\" ]; do # resolve $source until the file is no longer a symlink   dir=\"$( cd -P \"$( dirname \"$source\" )\" &amp;&amp; pwd )\"   source=\"$(readlink \"$source\")\"   [[ $source != \/* ]] &amp;&amp; source=\"$dir\/$source\" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located done root=\"$( cd -P \"$( dirname \"$source\" )\" &amp;&amp; pwd )\" cd \"$root\/..\" export TEST_BASE_URL=\"http:\/\/www.mysite.com\"; .\/vendor\/bin\/generate --configuration=phpunit.xml --output=mysite-manual-tests.com.pdf --tester=\"Josh Lewis\"  ","tags":"","url":"manual-tests.html"},{"title":"Module and Theme Testing","text":"     In order for unit testing to work with a module or a theme, you must add the module or theme's composer.json file to test\/composers.json and run composer install --lock from the test directory.   Quick Start   When you see tests\/composer.json, we are referring the file included in the dist folder of this project, which is the root directory containing the test runner phpunit.xml. Create composer.json in the module's folder ensuring it will autoload the module's classes that will be tested.  If not testing classes, but functions, make sure the module's composer.json file loads all files that contain the functions to be tested, usually using requre-dev.  This file may or may not have anything to do with Drupal (depending on the module's implementation), but it is required by the test runner's unit testing strategy. Add the path to the test runner's composer.json to tests\/composer.json, and you must call composer update --lock on the test runner for dependencies to be installed for the test runner. Add one or more tests to the module (according the file structure convention) extending one of the abstract classes provided by this module, e.g. \\AKlump\\DrupalTest\\UnitTestBase, `   Test File Structure  Each module or theme provides tests and schema files relative to it's own directory (.).  Following this convention allows the test runner to auto-discover these tests.  e.g.,  . \u2514\u2500\u2500 tests     \u251c\u2500\u2500 jsonschema     \u2502\u00a0\u00a0 \u2514\u2500\u2500 story_resource.json     \u2514\u2500\u2500 src         \u251c\u2500\u2500 Client         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Service         \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 EarthriseServiceClientTest.php         \u251c\u2500\u2500 Kernel         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Service         \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 BreakpointServiceKernelTest.php         \u2502\u00a0\u00a0 \u2514\u2500\u2500 TransformKernelTest.php         \u251c\u2500\u2500 TestBase.php         \u2514\u2500\u2500 Unit             \u251c\u2500\u2500 Service             \u2502\u00a0\u00a0 \u2514\u2500\u2500 EarthriseServiceUnitTest.php             \u2514\u2500\u2500 TransformUnitTest.php   Add the Module's composer.json  For a module to be unit testable it must have a composer.json file, which autoloads it's classes, the path of which must be added to this project's composer.json file, in the section extra.merge-plugin.require.  This is how the unit tests are able to autoload classes without bootstrapping Drupal, e.g.,      \"extra\": {         \"merge-plugin\": {             \"require\": [                 \"..\/web\/sites\/all\/modules\/custom\/gop3_core\/composer.json\"             ]         }     }   Must Test Classes Test a Single Class?  Unit and Kernel tests do not have to test a single class, for example if you are writing a test to cover theme functions.  In order to make this happen you have to do the following in your test class:      class InTheLoftThemeKernelTest extends KernelTestBase {        protected $schema = [          \/\/ By setting this to false, we indicate we are not testing a class.         'classToBeTested' =&gt; FALSE,       ];      ...  ","tags":"","url":"modules.html"},{"title":"Search Results","text":" ","tags":"","url":"search--results.html"},{"title":"Unit Tests","text":"   Test classnames should follow: &#42;UnitTest Unit tests do not have access to the Drupal bootstrap; these are very fast.  You should try to write unit tests whenever possible.  Only move to Kernel tests if unit tests are not appropriate. If a unit test requires a file that is not normally autoloaded, it should be added to the autoload-dev section of the module's composer file.   A Note About Test Suite Order in XML  You will probably not need to modify phpunit.xml. But if you do...  Be very careful when modifying phpunit.xml, that you do not list even a single kernel test before any unit tests.  When any kernel test is run, Drupal will be bootstrapped which \"pollutes\" the global namespace with stuff that could bleed into your unit tests, giving them out-of-scope and misleading functions, classes, constants, etc.  In effect they could be acting like kernel tests, if you're not careful.  Notice how the unit tests come before the kernel tests in the code below; client tests must also precede the Kernerl tests.  &lt;testsuites&gt;     &lt;testsuite name=\"Unit\"&gt;         &lt;directory&gt;..\/..\/web\/sites\/all\/modules\/custom\/*\/tests\/src\/Unit&lt;\/directory&gt;     &lt;\/testsuite&gt;     &lt;testsuite name=\"Client\"&gt;         &lt;directory&gt;..\/..\/web\/sites\/all\/modules\/custom\/*\/tests\/src\/Client&lt;\/directory&gt;     &lt;\/testsuite&gt;     &lt;testsuite name=\"Kernel\"&gt;         &lt;directory&gt;..\/..\/web\/sites\/all\/modules\/custom\/*\/tests\/src\/Kernel&lt;\/directory&gt;     &lt;\/testsuite&gt; &lt;\/testsuites&gt;   To be sure, run the entire unit test suite standalone on occassion, e.g.,  phpunit . --testsuite Unit   Troubleshooting  Fatal error: Class ... not found ...   Try running composer update --lock from tests (the test runner directory).  ","tags":"","url":"unit.html"}]};
