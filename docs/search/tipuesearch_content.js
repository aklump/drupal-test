var tipuesearch = {"pages":[{"title":"Drupal Test","text":"    Summary  This is a testing solution for using PhpUnit with Drupal 7 websites.  It provides Unit, Kernel, and Client abstract test classes to use in writing your tests, a single test runner, testing for modules and themes, as well as a set of guidelines and processes for better testing of Drupal 7 modules and websites. A single test runn  Visit https:\/\/aklump.github.io\/drupal_test for full documentation.  Quick Start  Download this project and rename the dist folder tests.  Move it one level above your Drupal 7 webroot.  You may discard the rest of the project files.  From inside the new tests directory run composer install.  Follow instructions in the documentation to write and run tests.  Load docs\/index.html in a browser.  Requirements   Composer PhpUnit   Contributing  If you find this project useful... please consider making a donation.  Installation  Beginning in a directory above the web root:  $ git clone https:\/\/github.com\/aklump\/drupal_test.git $ mv drupal_test\/dist tests $ rm -r drupal_test $ cd tests $ composer install   Usage  Run All Tests  $ cd tests $ phpunit -c phpunit.xml   Run All Unit Tests  $ cd tests $ phpunit -c phpunit.xml --testsuite Unit   Run All Kernel Tests  $ cd tests $ phpunit -c phpunit.xml --testsuite Kernel   Run All Client Tests  $ cd tests $ phpunit -c phpunit.xml --testsuite Client   Refer to the documentation for more info. ","tags":"","url":"README.html"},{"title":"Client Tests","text":"  This is a type of tests where you will be testing endpoints of an API or URLs.  Use this to check for URL statuses and headers for example.  This has the same scope as unit tests, which means you can access class constants, but no Drupal bootstrap.  You are a consumer or client of the website.  \/**  * Assert confirmation page is forbidden.  *\/ public function testConfirmationPageIsForbidden() {   $this-&gt;assertLocalUrlStatus(403, implode('\/', [     'node',     EarthriseService::NID_FORM,     'done',   ])); }   Configuration  The base URL must be set in an environment variable in order for client tests to work, e.g.,  $ cd tests\/phpunit $ export CLIENT_TEST_BASE_URL=http:\/\/develop.globalonenessproject.loft; phpunit -c phpunit.xml --testsuite Client  ","tags":"","url":"client.html"},{"title":"Kernel Tests","text":"   Test classnames should follow: &#42;KernelTest Kernel tests have a full Drupal bootstrap and access to the database, global functions and constants.   Data Providers and Kernel Tests   Bootstrapped Drupal elements, e.g. constants are not available in the data provider methods of a test class. Class constants are available, however.  ","tags":"","url":"kernel.html"},{"title":"Module Test Setup","text":"  Quick Start   Create composer.json in the module ensuring it will autoload the module's classes that will be tested.  This file may have nothing to do with Drupal, but it is used by the test runner's unit testing strategy. Add the path to the test runner's composer.json, and you must call composer update --lock on the test runner for dependencies to be installed for the test runner. Add one or more tests to the module as described below. Run the test runner.   Test File Structure  Each module or theme defines it's tests relative to it's own root directory.  Following this convention will allow the test runner to discover these tests.  e.g.,  . \u2514\u2500\u2500 tests     \u2514\u2500\u2500 src         \u251c\u2500\u2500 Client         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Service         \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 EarthriseServiceClientTest.php         \u251c\u2500\u2500 Kernel         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Service         \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 BreakpointServiceKernelTest.php         \u2502\u00a0\u00a0 \u2514\u2500\u2500 TransformKernelTest.php         \u251c\u2500\u2500 TestBase.php         \u2514\u2500\u2500 Unit             \u251c\u2500\u2500 Service             \u2502\u00a0\u00a0 \u2514\u2500\u2500 EarthriseServiceUnitTest.php             \u2514\u2500\u2500 TransformUnitTest.php   Add the Module's composer.json  For a module to be unit testable it must have a composer.json file, which autoloads it's classes, the path of which must be added to this project's composer.json file, in the section extra.merge-plugin.require.  This is how the unit tests are able to autoload classes without bootstrapping Drupal, e.g.,      \"extra\": {         \"merge-plugin\": {             \"require\": [                 \"..\/web\/sites\/all\/modules\/custom\/gop3_core\/composer.json\"             ]         }     }   Must Test Classes Test a Single Class?  Unit and Kernel tests do not have to test a single class, for example if you are writing a test to cover theme functions.  In order to make this happen you have to do the following in your test class:      class Gop5ThemeKernelTest extends KernelTestBase {        protected $schema = [          \/\/ By setting this to false, we indicate we are not testing a class.         'classToBeTested' =&gt; FALSE,       ];      ...  ","tags":"","url":"modules.html"},{"title":"Search Results","text":" ","tags":"","url":"search--results.html"},{"title":"Unit Tests","text":"   Test classnames should follow: &#42;UnitTest Unit tests do not have access to the Drupal bootstrap; these are very fast.  You should try to write unit tests whenever possible.  Only move to Kernel tests if unit tests are not appropriate. If a unit test requires a file that is not normally autoloaded, it should be added to the autoload-dev section of the module's composer file.   A Note About Test Suite Order in XML  You will probably not need to modify phpunit.xml. But if you do...  Be very careful when modifying phpunit.xml, that you do not list even a single kernel test before any unit tests.  When any kernel test is run, Drupal will be bootstrapped which \"pollutes\" the global namespace with stuff that could bleed into your unit tests, giving them out-of-scope and misleading functions, classes, constants, etc.  In effect they could be acting like kernel tests, if you're not careful.  Notice how the unit tests come before the kernel tests in the code below; client tests must also precede the Kernerl tests.  &lt;testsuites&gt;     &lt;testsuite name=\"Unit\"&gt;         &lt;directory&gt;..\/..\/web\/sites\/all\/modules\/custom\/*\/tests\/src\/Unit&lt;\/directory&gt;     &lt;\/testsuite&gt;     &lt;testsuite name=\"Client\"&gt;         &lt;directory&gt;..\/..\/web\/sites\/all\/modules\/custom\/*\/tests\/src\/Client&lt;\/directory&gt;     &lt;\/testsuite&gt;     &lt;testsuite name=\"Kernel\"&gt;         &lt;directory&gt;..\/..\/web\/sites\/all\/modules\/custom\/*\/tests\/src\/Kernel&lt;\/directory&gt;     &lt;\/testsuite&gt; &lt;\/testsuites&gt;   To be sure, run the entire unit test suite standalone on occassion, e.g.,  phpunit . --testsuite Unit   Troubleshooting  Fatal error: Class ... not found ... ","tags":"","url":"unit.html"}]};
